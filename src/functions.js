/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {
    return null;
}

//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
/*Here we don't immediately return false if the array contains a value that
cannot be doubled since the function description stipulates that every number
be doubled. E.g., if we pass the argument foo = [3.5, "goats", 4.6], the result
should be foo = [7, "goats", 9.2] and bar = false, not foo = [7, "goats", 4.6]
and bar = false. At least, that is my interpretation, and why I use a separate
variable 'success' instead of just returning 'false' as soon as a non-number
is encountered. */

bar = function(doubleArray) {
  var success = true;
  for (var i = 0; i < doubleArray.length; i++) {
     if (isNaN(doubleArray[i])) {
          success = false;
     }

     else {
         doubleArray[i] *= 2;
     }
  }
  return success;
};
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(logArray) {

     var newEntry;
     var glArray = new Array();

     for (var i = 0; i < logArray.length; i++) {

          newEntry = new GitLog();

          for (var j = 0; j < logArray[i].length; j++) {
               if (logArray[i][j] == ' ') {
                    newEntry.hash = logArray[i].slice(0, j);
                    break;
               }
          }

          for (var h = j + 1; h < logArray[i].length; h++) {
               if (logArray[i][h] == '"') {
                    newEntry.date = new Date(logArray[i].slice(j + 1, h - 1));
                    newEntry.message =
                         logArray[i].slice(h + 1, logArray[i].length - 1);
                    break;
               }
          }

          glArray[i] = newEntry;
     }

     return glArray;
}

//end your code
